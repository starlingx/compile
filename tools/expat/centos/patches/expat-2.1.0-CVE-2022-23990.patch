From 22230be4ea7add403a786f4df8c5409de630adcb Mon Sep 17 00:00:00 2001
From: Sebastian Pipping <sebastian@pipping.org>
Date: Wed, 26 Jan 2022 02:36:43 +0100
Subject: [PATCH] lib: Prevent integer overflow in doProlog (CVE-2022-23990)

The change from "int nameLen" to "size_t nameLen"
addresses the overflow on "nameLen++" in code
"for (; name[nameLen++];)" right above the second
change in the patch.

Upstream-Status: Backport:
https://github.com/libexpat/libexpat/pull/551/commits/ede41d1e186ed2aba88a06e84cac839b770af3a1

CVE: CVE-2022-23990

Signed-off-by: Steve Sakoman <steve@sakoman.com>
Signed-off-by: Joe Slater <joe.slater@windriver.com>
---
 lib/xmlparse.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/lib/xmlparse.c b/lib/xmlparse.c
index 989ab8c..b79725d 100644
--- a/lib/xmlparse.c
+++ b/lib/xmlparse.c
@@ -4931,7 +4931,7 @@ doProlog(XML_Parser parser,
       if (dtd->in_eldecl) {
         ELEMENT_TYPE *el;
         const XML_Char *name;
-        int nameLen;
+        size_t nameLen;
         const char *nxt = (quant == XML_CQUANT_NONE
                            ? next
                            : next - enc->minBytesPerChar);
@@ -4946,8 +4946,16 @@ doProlog(XML_Parser parser,
         name = el->name;
         dtd->scaffold[myindex].name = name;
         nameLen = 0;
+
         for (; name[nameLen++]; );
-        dtd->contentStringLen +=  nameLen;
+
+        /* Detect and prevent integer overflow */
+        if (nameLen > UINT_MAX - dtd->contentStringLen) {
+          return XML_ERROR_NO_MEMORY;
+        }
+
+        dtd->contentStringLen += (unsigned)nameLen;
+
         if (elementDeclHandler)
           handleDefault = XML_FALSE;
       }
-- 
2.29.2

